#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *createNode(int value) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

Node *insertAtBeginning(Node *head, int value) {
    Node *newNode = createNode(value);
    newNode->next = head;
    return newNode;
}

Node *concat(Node *head1, Node *head2) {
    if (head1 == NULL) {
        return head2;
    }
    Node *temp = head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = head2;
    return head1;
}

Node *sort(Node *head) {
    if (head == NULL) return NULL;

    Node *temp, *current;
    int t;
    current = head;
    while (current != NULL) {
        temp = head;
        while (temp->next != NULL) {
            if (temp->data > temp->next->data) {

                t = temp->data;
                temp->data = temp->next->data;
                temp->next->data = t;
            }
            temp = temp->next;
        }
        current = current->next;
    }
    return head;
}

Node *reverse(Node *head) {
    Node *prev = NULL, *temp, *next;
    temp = head;
    while (temp != NULL) {
        next = temp->next;
        temp->next = prev;
        prev = temp;
        temp = next;
    }
    head = prev;
    return head;
}

void displayLinkedList(Node *head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    Node *list1 = NULL;
    Node *list2 = NULL;
    int choice, value;

    list1 = insertAtBeginning(list1, 11);
    list1 = insertAtBeginning(list1, 37);
    list1 = insertAtBeginning(list1, 22);

    list2 = insertAtBeginning(list2, 4);
    list2 = insertAtBeginning(list2, 13);
    list2 = insertAtBeginning(list2, 7);

    while (1) {
        printf("\nMenu:\n");
        printf("1. Display Lists\n");
        printf("2. Sort Lists\n");
        printf("3. Concatenate Lists\n");
        printf("4. Reverse List\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 5) {
            printf("Exiting...\n");
            break;
        }

        switch (choice) {
            case 1:
                printf("\nOriginal Lists:\n");
                displayLinkedList(list1);
                displayLinkedList(list2);
                break;

            case 2:
                printf("\nAfter Sorting:\n");
                list1 = sort(list1);
                list2 = sort(list2);
                displayLinkedList(list1);
                displayLinkedList(list2);
                break;

            case 3:
                printf("\nAfter Concatenation:\n");
                list1 = concat(list1, list2);
                displayLinkedList(list1);
                break;

            case 4:
                printf("\nAfter Reversing List:\n");
                list1 = reverse(list1);
                displayLinkedList(list1);
                break;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}